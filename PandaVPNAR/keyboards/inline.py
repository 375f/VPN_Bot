"""
Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±–æ—Ç–∞.
"""
from typing import List, Optional

from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import Config

async def is_admin(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    
    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –∏–Ω–∞—á–µ False
    """
    return user_id == Config.ADMIN_ID

async def main_menu_keyboard(user_id: int) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        types.InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    builder = InlineKeyboardBuilder()
    
    if await is_admin(user_id):
        builder.row(
            types.InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á", callback_data="create_key"),
            types.InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π", callback_data="list_keys")
        )
    else:
        builder.add(types.InlineKeyboardButton(
            text="üì® –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–ª—é—á", 
            callback_data="request_key"
        ))
    
    return builder.as_markup()

def keys_list_keyboard(keys: List[dict]) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–ª—é—á–µ–π.
    
    Args:
        keys (List[dict]): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª—é—á–∞—Ö
        
    Returns:
        types.InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–ª—é—á–µ–π
    """
    builder = InlineKeyboardBuilder()
    
    for key in keys:
        builder.row(types.InlineKeyboardButton(
            text=f"üîë {key.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}",
            callback_data=f"key_detail_{key['id']}"
        ))
    
    builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
    return builder.as_markup()

def key_detail_keyboard(key_id: str) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–µ.
    
    Args:
        key_id (str): ID –∫–ª—é—á–∞
        
    Returns:
        types.InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–ª—é—á–∞
    """
    builder = InlineKeyboardBuilder()
    
    builder.row(types.InlineKeyboardButton(
        text="üóë –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á",
        callback_data=f"delete_ask_{key_id}"
    ))
    
    builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="list_keys"))
    return builder.as_markup()

def delete_confirmation_keyboard(key_id: str) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞.
    
    Args:
        key_id (str): ID –∫–ª—é—á–∞
        
    Returns:
        types.InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    """
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"delete_confirm_{key_id}"),
        types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"key_detail_{key_id}")
    )
    return builder.as_markup()